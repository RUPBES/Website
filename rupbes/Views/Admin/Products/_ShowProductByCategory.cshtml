@using rupbes.Models.Products
@model List<Product>
<div class="card card-primary card-outline mb-4">
    <!--begin::Header-->
    <div class="card-header"><div class="card-title">Товары</div></div>
    <!--end::Header-->
    @if (Model.Count() > 0)
    {
        <!--begin::Body-->
        <div class="card-body">
            <div class="list-group">
                @foreach (var item in Model)
                {
                    <button class="list-group-item list-group-item-action" onclick="ShowProductsById(@item.id)">
                        <i class="bi bi-box-sea"></i>@item.name
                    </button>
                }
            </div>
        </div>
        <!--end::Body-->
        <div class="card-footer">
            <nav aria-label="Products">
                <ul class="pagination" id="pagination">
                    <li class="page-item"><a class="page-link" href="#" id="prevPage">Предыдущая</a></li>
                    <li class="page-item"><a class="page-link" href="#" id="nextPage">Следующая</a></li>
                </ul>
            </nav>
        </div>
    }
    else
    {
        <div class="card-body">
            <div class="alert alert-info" role="alert">
                Пока не добавили товары.
            </div>
        </div>
    }
</div>

<script>
    function createPagination(totalPages, currentPage) {
        // Проверяем значение totalPages
        if (totalPages == 0) {
            // Выход из функции, если totalPages равно 0
            return;
        }

        const pagination = document.getElementById('pagination');
        pagination.innerHTML = ''; // Очищаем текущие элементы

        // Кнопка "Предыдущая"
        const prevButton = `<li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                            <a class="page-link" href="#" id="prevPage">Пред.</a>
                        </li>`;
        pagination.innerHTML += prevButton;

        // Определяем диапазон страниц для отображения
        let startPage, endPage;
        if (totalPages <= 7) {
            // Если страниц меньше или равно 7, отображаем все
            startPage = 1;
            endPage = totalPages;
        } else {
            // Если страниц больше 7, отображаем 7 страниц вокруг текущей
            if (currentPage <= 4) {
                startPage = 1;
                endPage = 7;
            } else if (currentPage + 3 >= totalPages) {
                startPage = totalPages - 6;
                endPage = totalPages;
            } else {
                startPage = currentPage - 3;
                endPage = currentPage + 3;
            }
        }

        // Номера страниц
        for (let i = startPage; i <= endPage; i++) {
            const pageItem = `<li class="page-item ${i === currentPage ? 'active' : ''}">
                              <a class="page-link" href="#" data-page="${i}">${i}</a>
                          </li>`;
            pagination.innerHTML += pageItem;
        }

        // Кнопка "Следующая"
        const nextButton = `<li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                            <a class="page-link" href="#" id="nextPage">След.</a>
                        </li>`;
        pagination.innerHTML += nextButton;

        // Обработка кликов по страницам
        document.querySelectorAll('.page-link').forEach(link => {
            link.addEventListener('click', function (e) {
                e.preventDefault();
                const page = this.getAttribute('data-page'); // Номер страницы
                if (page) {
                    loadPage(parseInt(page)); // Загружаем данные для выбранной страницы
                } else if (this.id === 'prevPage') {
                    loadPage(currentPage - 1); // Переход на предыдущую страницу
                } else if (this.id === 'nextPage') {
                    loadPage(currentPage + 1); // Переход на следующую страницу
                }
            });
        });
    }
</script>
<script>
    // Функция для загрузки данных страницы
    function loadPage(page) {
        var count = 20;
        // Найти все элементы с классами btn-outline-info и active
        var activeButtons = $('.btn-outline-info.active');
        // Пройтись по каждому найденному элементу
        activeButtons.each(function () {
            count = $(this).val(); // Получить значение атрибута value
        });

        var groupId = $('#CategoryProduct').val(); // Получаем значение Select

        // Проверяем, существует ли элемент SubCategoryProduct на странице
        var subCategoryId = 0; // Устанавливаем значение по умолчанию в 0

        if ($('#SubCategoryProduct').length) {
            // Если элемент существует, получаем его значение
            subCategoryId = $('#SubCategoryProduct').val();
        }

        $.ajax({
            type: "POST",
            url: '@Url.Action("ShowProductByCategory", "Admin")',
            data: { groupId: groupId, subGroupId: subCategoryId, page: page, count: count },
            success: function (data) {
                $('#containerProduct').html(data);
            },
            error: function (xhr, status, error) {
                var toastDanger = new bootstrap.Toast(document.getElementById('toastDanger'));
                $('#toast-body-danger').html("Произошла ошибка при получении товаров.");
                toastDanger.show();
                console.error("Ошибка при выполнении AJAX-запроса:", error);
            }
        });
    }
</script>
<script>
    createPagination(@ViewBag.totalPages, @ViewBag.activePage);

    function ShowProductsById(id) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("ShowProductsById", "Admin")',
            data: { id: id },
            success: function (data) {
                $('#productById').html(data);
            },
            error: function (xhr, status, error) {
                var toastDanger = new bootstrap.Toast(document.getElementById('toastDanger'));
                $('#toast-body-danger').html("Произошла ошибка при получении товара.");
                toastDanger.show();
                console.error("Ошибка при выполнении AJAX-запроса:", error);
            }
        });
    }
</script>
